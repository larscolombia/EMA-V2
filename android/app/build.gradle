plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withInputStream { keystoreProperties.load(it) }
}

android {
    // Production namespace / applicationId (update if you already published with another id)
    // NOTE: change only once before publishing to Play Store to avoid losing update path.
    namespace = "com.ema.educacion"
    compileSdk = flutter.compileSdkVersion
    // Pin to a locally installed NDK version with a valid source.properties.
    // Previous value (flutter.ndkVersion -> 26.3.11579264) was partially installed and broke release builds.
    ndkVersion = "26.1.10909125"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // Production Application ID. Keep in sync with namespace (can differ, but keep simple).
        applicationId = "com.ema.educacion"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            // Only configure if key.properties exists; otherwise fallback to debug for local builds.
            if (keystoreProperties.containsKey('storeFile')) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            // Use release signing if available, else debug (avoids build break for contributors).
            signingConfig signingConfigs.release.storeFile != null ? signingConfigs.release : signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            // Keep Flutter / plugin entry points; default proguard rules from Flutter are applied automatically.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Disable code shrinking in debug.
            minifyEnabled false
        }
    }
}

flutter {
    source = "../.."
}
